services:
  api:
    build:
      context: .
      dockerfile: ./docker/local/django/dockerfile
    command: /start
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    # ports:
    #   - "8000:8000"
    depends_on:
      - postgres-db
      - redis
    env_file:
      - .env
    networks:
      - estate-react
  postgres-db:
    image: postgres:16
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - estate-react
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis: 
    image: redis:5-alpine
    networks:
      - estate-react
  celery:
    build:
      context: .
      dockerfile: ./docker/local/django/dockerfile
    command: /start-celeryworker
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - redis
      - postgres-db
    networks:
      - estate-react
  
  flower:
    build:
      context:  .
      dockerfile: ./docker/local/django/dockerfile
  
  nginx:
    restart: always
    depends_on:
      - api
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    build:
      context: ./docker/local/nginx
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    networks:
      - estate-react
  

networks:
  estate-react:
    driver: bridge
volumes:
  postgres_data:
  static_volume:
  media_volume:
